<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Nov 03 12:34:00 2024
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART3_IRQHandler &rArr; parseData &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[55]">uECC_vli_add</a>
 <LI><a href="#[58]">uECC_vli_sub</a>
 <LI><a href="#[62]">uECC_vli_mult</a>
 <LI><a href="#[126]">uECC_set_rng</a>
 <LI><a href="#[127]">uECC_get_rng</a>
 <LI><a href="#[128]">uECC_curve_private_key_size</a>
 <LI><a href="#[129]">uECC_curve_public_key_size</a>
 <LI><a href="#[56]">uECC_vli_clear</a>
 <LI><a href="#[5d]">uECC_vli_isZero</a>
 <LI><a href="#[5a]">uECC_vli_testBit</a>
 <LI><a href="#[66]">uECC_vli_numBits</a>
 <LI><a href="#[5b]">uECC_vli_set</a>
 <LI><a href="#[7b]">uECC_vli_equal</a>
 <LI><a href="#[5c]">uECC_vli_cmp</a>
 <LI><a href="#[5f]">uECC_vli_rshift1</a>
 <LI><a href="#[61]">uECC_vli_square</a>
 <LI><a href="#[63]">uECC_vli_modAdd</a>
 <LI><a href="#[64]">uECC_vli_modSub</a>
 <LI><a href="#[65]">uECC_vli_mmod</a>
 <LI><a href="#[67]">uECC_vli_modMult</a>
 <LI><a href="#[68]">uECC_vli_modMult_fast</a>
 <LI><a href="#[69]">uECC_vli_modSquare</a>
 <LI><a href="#[6a]">uECC_vli_modSquare_fast</a>
 <LI><a href="#[6f]">uECC_vli_modInv</a>
 <LI><a href="#[12a]">uECC_secp160r1</a>
 <LI><a href="#[12b]">uECC_secp192r1</a>
 <LI><a href="#[12c]">uECC_secp224r1</a>
 <LI><a href="#[12d]">uECC_secp256r1</a>
 <LI><a href="#[12e]">uECC_secp256k1</a>
 <LI><a href="#[71]">uECC_generate_random_int</a>
 <LI><a href="#[76]">uECC_vli_nativeToBytes</a>
 <LI><a href="#[73]">uECC_vli_bytesToNative</a>
 <LI><a href="#[77]">uECC_make_key</a>
 <LI><a href="#[78]">uECC_shared_secret</a>
 <LI><a href="#[12f]">uECC_compress</a>
 <LI><a href="#[79]">uECC_decompress</a>
 <LI><a href="#[7a]">uECC_valid_point</a>
 <LI><a href="#[7c]">uECC_valid_public_key</a>
 <LI><a href="#[7d]">uECC_compute_public_key</a>
 <LI><a href="#[7e]">uECC_sign_with_k</a>
 <LI><a href="#[7f]">uECC_sign</a>
 <LI><a href="#[80]">uECC_sign_deterministic</a>
 <LI><a href="#[81]">uECC_verify</a>
 <LI><a href="#[130]">uECC_curve_num_words</a>
 <LI><a href="#[131]">uECC_curve_num_bytes</a>
 <LI><a href="#[132]">uECC_curve_num_bits</a>
 <LI><a href="#[133]">uECC_curve_num_n_words</a>
 <LI><a href="#[134]">uECC_curve_num_n_bytes</a>
 <LI><a href="#[135]">uECC_curve_num_n_bits</a>
 <LI><a href="#[136]">uECC_curve_p</a>
 <LI><a href="#[137]">uECC_curve_n</a>
 <LI><a href="#[138]">uECC_curve_G</a>
 <LI><a href="#[139]">uECC_curve_b</a>
 <LI><a href="#[13a]">uECC_vli_mod_sqrt</a>
 <LI><a href="#[13b]">uECC_vli_mmod_fast</a>
 <LI><a href="#[82]">uECC_point_mult</a>
 <LI><a href="#[85]">H2BYTE</a>
 <LI><a href="#[83]">hexToBytes</a>
 <LI><a href="#[86]">my_memset_s</a>
 <LI><a href="#[87]">shake128</a>
 <LI><a href="#[88]">shake256</a>
 <LI><a href="#[89]">sha3_224</a>
 <LI><a href="#[8a]">sha3_256</a>
 <LI><a href="#[8b]">sha3_384</a>
 <LI><a href="#[8c]">sha3_512</a>
 <LI><a href="#[8d]">keccak_256</a>
 <LI><a href="#[8e]">ukeccak256_init</a>
 <LI><a href="#[13c]">ukeccak256_deinit</a>
 <LI><a href="#[8f]">ukeccak256_update</a>
 <LI><a href="#[90]">ukeccak256_finish</a>
 <LI><a href="#[91]">ukeccak256_digest</a>
 <LI><a href="#[92]">ukeccak256</a>
 <LI><a href="#[93]">toUtf8Bytes</a>
 <LI><a href="#[94]">etherhash1</a>
 <LI><a href="#[97]">Utf8len</a>
 <LI><a href="#[96]">etherhash</a>
 <LI><a href="#[98]">keccak256</a>
 <LI><a href="#[99]">calculateEthereumAddress</a>
 <LI><a href="#[9b]">command_verify</a>
 <LI><a href="#[57]">uECC_vli_cmp_unsafe</a>
 <LI><a href="#[4c]">HMAC_init</a>
 <LI><a href="#[4d]">HMAC_update</a>
 <LI><a href="#[4e]">HMAC_finish</a>
 <LI><a href="#[4b]">update_V</a>
 <LI><a href="#[52]">keccakf</a>
 <LI><a href="#[51]">xorin</a>
 <LI><a href="#[4f]">hash</a>
 <LI><a href="#[54]">omega_mult_secp256k1</a>
 <LI><a href="#[41]">vli_mmod_fast_secp256k1</a>
 <LI><a href="#[59]">regularize_k</a>
 <LI><a href="#[44]">vli_mmod_fast_secp192r1</a>
 <LI><a href="#[46]">vli_mmod_fast_secp224r1</a>
 <LI><a href="#[47]">vli_mmod_fast_secp256r1</a>
 <LI><a href="#[5e]">vli_modInv_update</a>
 <LI><a href="#[60]">omega_mult_secp160r1</a>
 <LI><a href="#[48]">vli_mmod_fast_secp160r1</a>
 <LI><a href="#[43]">x_side_default</a>
 <LI><a href="#[3f]">mod_sqrt_default</a>
 <LI><a href="#[42]">double_jacobian_default</a>
 <LI><a href="#[6b]">mod_sqrt_secp224r1_rs</a>
 <LI><a href="#[40]">x_side_secp256k1</a>
 <LI><a href="#[3e]">double_jacobian_secp256k1</a>
 <LI><a href="#[6c]">XYcZ_addC</a>
 <LI><a href="#[6d]">XYcZ_add</a>
 <LI><a href="#[6e]">apply_z</a>
 <LI><a href="#[45]">mod_sqrt_secp224r1</a>
 <LI><a href="#[70]">EccPoint_mult</a>
 <LI><a href="#[72]">EccPoint_compute_public_key</a>
 <LI><a href="#[74]">bits2int</a>
 <LI><a href="#[75]">uECC_sign_with_k_internal</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">CAN1_RX1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from ad.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from serial.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bluetooth.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3c]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[3d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[42]">double_jacobian_default</a> from uECC.o(.text) referenced 4 times from uECC.o(.rodata)
 <LI><a href="#[3e]">double_jacobian_secp256k1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[3b]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3f]">mod_sqrt_default</a> from uECC.o(.text) referenced 4 times from uECC.o(.rodata)
 <LI><a href="#[45]">mod_sqrt_secp224r1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[48]">vli_mmod_fast_secp160r1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[44]">vli_mmod_fast_secp192r1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[46]">vli_mmod_fast_secp224r1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[41]">vli_mmod_fast_secp256k1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[47]">vli_mmod_fast_secp256r1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
 <LI><a href="#[43]">x_side_default</a> from uECC.o(.text) referenced 4 times from uECC.o(.rodata)
 <LI><a href="#[40]">x_side_secp256k1</a> from uECC.o(.text) referenced from uECC.o(.rodata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[121]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[122]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[123]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[124]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[125]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>uECC_vli_add</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1
</UL>

<P><STRONG><a name="[58]"></a>uECC_vli_sub</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_decompress
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
</UL>

<P><STRONG><a name="[62]"></a>uECC_vli_mult</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_square
</UL>

<P><STRONG><a name="[126]"></a>uECC_set_rng</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>uECC_get_rng</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>uECC_curve_private_key_size</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>uECC_curve_public_key_size</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>uECC_vli_clear</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
</UL>

<P><STRONG><a name="[5d]"></a>uECC_vli_isZero</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_compute_public_key
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
</UL>

<P><STRONG><a name="[5a]"></a>uECC_vli_testBit</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>

<P><STRONG><a name="[66]"></a>uECC_vli_numBits</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
</UL>

<P><STRONG><a name="[5b]"></a>uECC_vli_set</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
</UL>

<P><STRONG><a name="[7b]"></a>uECC_vli_equal</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
</UL>

<P><STRONG><a name="[5c]"></a>uECC_vli_cmp</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_compute_public_key
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
</UL>

<P><STRONG><a name="[5f]"></a>uECC_vli_rshift1</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
</UL>

<P><STRONG><a name="[61]"></a>uECC_vli_square</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>

<P><STRONG><a name="[63]"></a>uECC_vli_modAdd</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[64]"></a>uECC_vli_modSub</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[65]"></a>uECC_vli_mmod</STRONG> (Thumb, 316 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uECC_vli_mmod &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult
</UL>

<P><STRONG><a name="[67]"></a>uECC_vli_modMult</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uECC_vli_modMult &rArr; uECC_vli_mmod &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
</UL>

<P><STRONG><a name="[68]"></a>uECC_vli_modMult_fast</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[69]"></a>uECC_vli_modSquare</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult
</UL>

<P><STRONG><a name="[6a]"></a>uECC_vli_modSquare_fast</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
</UL>

<P><STRONG><a name="[6f]"></a>uECC_vli_modInv</STRONG> (Thumb, 266 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uECC_vli_modInv &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
</UL>

<P><STRONG><a name="[12a]"></a>uECC_secp160r1</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>uECC_secp192r1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>uECC_secp224r1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>uECC_secp256r1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>uECC_secp256k1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>uECC_generate_random_int</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[76]"></a>uECC_vli_nativeToBytes</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_compute_public_key
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_decompress
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
</UL>

<P><STRONG><a name="[73]"></a>uECC_vli_bytesToNative</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uECC_vli_bytesToNative &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_compute_public_key
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_decompress
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
</UL>

<P><STRONG><a name="[77]"></a>uECC_make_key</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[78]"></a>uECC_shared_secret</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>

<P><STRONG><a name="[12f]"></a>uECC_compress</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>uECC_decompress</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
</UL>

<P><STRONG><a name="[7a]"></a>uECC_valid_point</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_equal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key
</UL>

<P><STRONG><a name="[7c]"></a>uECC_valid_public_key</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
</UL>

<P><STRONG><a name="[7d]"></a>uECC_compute_public_key</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[7e]"></a>uECC_sign_with_k</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
</UL>

<P><STRONG><a name="[7f]"></a>uECC_sign</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
</UL>

<P><STRONG><a name="[80]"></a>uECC_sign_deterministic</STRONG> (Thumb, 412 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_V
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_finish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_update
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_init
</UL>

<P><STRONG><a name="[81]"></a>uECC_verify</STRONG> (Thumb, 720 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uECC_verify &rArr; uECC_vli_bytesToNative &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_equal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
</UL>

<P><STRONG><a name="[130]"></a>uECC_curve_num_words</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>uECC_curve_num_bytes</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>uECC_curve_num_bits</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>uECC_curve_num_n_words</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>uECC_curve_num_n_bytes</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>uECC_curve_num_n_bits</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>uECC_curve_p</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>uECC_curve_n</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>uECC_curve_G</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>uECC_curve_b</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>uECC_vli_mod_sqrt</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>uECC_vli_mmod_fast</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>uECC_point_mult</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>

<P><STRONG><a name="[85]"></a>H2BYTE</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToBytes
</UL>

<P><STRONG><a name="[83]"></a>hexToBytes</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H2BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
</UL>

<P><STRONG><a name="[86]"></a>my_memset_s</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[87]"></a>shake128</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[88]"></a>shake256</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[89]"></a>sha3_224</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[8a]"></a>sha3_256</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[8b]"></a>sha3_384</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[8c]"></a>sha3_512</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[8d]"></a>keccak_256</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = keccak_256 &rArr; hash &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256
</UL>

<P><STRONG><a name="[8e]"></a>ukeccak256_init</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[13c]"></a>ukeccak256_deinit</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>ukeccak256_update</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccakf
</UL>

<P><STRONG><a name="[90]"></a>ukeccak256_finish</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccakf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_digest
</UL>

<P><STRONG><a name="[91]"></a>ukeccak256_digest</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_finish
</UL>

<P><STRONG><a name="[92]"></a>ukeccak256</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ukeccak256 &rArr; keccak_256 &rArr; hash &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccak_256
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccak256
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash1
</UL>

<P><STRONG><a name="[93]"></a>toUtf8Bytes</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash1
</UL>

<P><STRONG><a name="[94]"></a>etherhash1</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toUtf8Bytes
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>

<P><STRONG><a name="[97]"></a>Utf8len</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
</UL>

<P><STRONG><a name="[96]"></a>etherhash</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = etherhash &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utf8len
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
</UL>

<P><STRONG><a name="[98]"></a>keccak256</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = keccak256 &rArr; ukeccak256 &rArr; keccak_256 &rArr; hash &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateEthereumAddress
</UL>

<P><STRONG><a name="[99]"></a>calculateEthereumAddress</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = calculateEthereumAddress &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccak256
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
</UL>

<P><STRONG><a name="[9b]"></a>command_verify</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = command_verify &rArr; etherhash &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateEthereumAddress
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToBytes
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToTheseJson
</UL>

<P><STRONG><a name="[13d]"></a>___aeabi_memcpy$ret</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CurrentRotate
</UL>

<P><STRONG><a name="[53]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_digest
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_finish
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memset_s
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[100]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CurrentRotate
</UL>

<P><STRONG><a name="[11e]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseData
</UL>

<P><STRONG><a name="[11f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseData
</UL>

<P><STRONG><a name="[84]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toUtf8Bytes
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToBytes
</UL>

<P><STRONG><a name="[9c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_UUID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToTheseJson
</UL>

<P><STRONG><a name="[9f]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseData
</UL>

<P><STRONG><a name="[b3]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[145]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[146]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[147]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[148]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[149]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[b2]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[b4]"></a>AD1_GetValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ad.o(i.AD1_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD1_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>AD2_GetValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ad.o(i.AD2_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD2_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
</UL>

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ad.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_2_IRQHandler &rArr; AD1_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_AnalogWatchdogCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[c2]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_AnalogWatchdogSingleChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[c1]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_AnalogWatchdogThresholdsConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[b9]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[c9]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[b7]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD2_GetValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetValue
</UL>

<P><STRONG><a name="[b6]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD2_GetValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetValue
</UL>

<P><STRONG><a name="[c7]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[c4]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[bf]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[c0]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[c6]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[b5]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD2_GetValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetValue
</UL>

<P><STRONG><a name="[c8]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[ba]"></a>AD_Init</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ad.o(i.AD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogThresholdsConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogSingleChannelConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>BatteryLock_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, battery.o(i.BatteryLock_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatteryLock_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>BatteryLock_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, battery.o(i.BatteryLock_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatteryLock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>BatteryLock_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, battery.o(i.BatteryLock_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatteryLock_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>BatteryVoltage_get</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, ad.o(i.BatteryVoltage_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BatteryVoltage_get &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD2_GetValue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>Battery_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, battery.o(i.Battery_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Battery_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>Battery_lockFail</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(i.Battery_lockFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Battery_lockFail &rArr; Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBatteryCommand
</UL>

<P><STRONG><a name="[d6]"></a>Battery_offNotify</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(i.Battery_offNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Battery_offNotify &rArr; Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBatteryCommand
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
</UL>

<P><STRONG><a name="[d7]"></a>Battery_openFail</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(i.Battery_openFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Battery_openFail &rArr; Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBatteryCommand
</UL>

<P><STRONG><a name="[d8]"></a>Battery_openNotify</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(i.Battery_openNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Battery_openNotify &rArr; Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBatteryCommand
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
</UL>

<P><STRONG><a name="[d9]"></a>BlueAT_SendData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bluetooth.o(i.BlueAT_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[dc]"></a>Blue_Init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, bluetooth.o(i.Blue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Blue_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>Blue_check</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluetooth.o(i.Blue_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Blue_check
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>Check_move</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ad.o(i.Check_move))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>Controller_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, controller.o(i.Controller_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Controller_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>Controller_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, controller.o(i.Controller_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Controller_off
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>Controller_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, controller.o(i.Controller_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Controller_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>Delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, delay.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>Delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[e9]"></a>DoToCommand</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bluetooth.o(i.DoToCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoToCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToTheseJson
</UL>

<P><STRONG><a name="[e8]"></a>DoToTheseJson</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, bluetooth.o(i.DoToTheseJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = DoToTheseJson &rArr; command_verify &rArr; etherhash &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_UUID
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Time
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[e2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBatteryCommand
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatteryLockState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_check
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_off
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryLock_Reset
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_on
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryLock_on
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryLock_off
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[ec]"></a>GetStateWhenopen</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, battery.o(i.GetStateWhenopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetStateWhenopen &rArr; GetUniqueID &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueID
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_openNotify
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_offNotify
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>GetUniqueID</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, battery.o(i.GetUniqueID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetUniqueID &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
</UL>

<P><STRONG><a name="[ef]"></a>Get_BatteryLockState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, battery.o(i.Get_BatteryLockState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_BatteryLockState
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[df]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[f0]"></a>NormalOperationFlag</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(i.NormalOperationFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NormalOperationFlag &rArr; Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[f4]"></a>OLED_I2C_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, oled.o(i.OLED_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[f6]"></a>OLED_I2C_SendByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, oled.o(i.OLED_I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[f7]"></a>OLED_I2C_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oled.o(i.OLED_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[f8]"></a>OLED_I2C_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled.o(i.OLED_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[f9]"></a>OLED_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>OLED_Pow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled.o(i.OLED_Pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[f2]"></a>OLED_SetCursor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, oled.o(i.OLED_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[fb]"></a>OLED_ShowChar</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[fc]"></a>OLED_ShowNum</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>OLED_WriteCommand</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[f3]"></a>OLED_WriteData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WriteData &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[bc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[bb]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[10a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>Send_AT_Command</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluetooth.o(i.Send_AT_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueAT_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalOperationFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_openNotify
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_openFail
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_offNotify
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_lockFail
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CurrentRotate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
</UL>

<P><STRONG><a name="[fe]"></a>Send_CurrentRotate</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ad.o(i.Send_CurrentRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Send_CurrentRotate &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>Serial_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, serial.o(i.Serial_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Serial_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>Serial_SendArray</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serial.o(i.Serial_SendArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Serial_SendArray &rArr; Serial_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unLockBikeCommand3
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unLockBikeCommand2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unLockBikeCommand1
</UL>

<P><STRONG><a name="[103]"></a>Serial_SendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial.o(i.Serial_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Serial_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendArray
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, serial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, bluetooth.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USART3_IRQHandler &rArr; parseData &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[da]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueAT_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendByte
</UL>

<P><STRONG><a name="[106]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[dd]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
</UL>

<P><STRONG><a name="[107]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueAT_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendByte
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>Verify_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluetooth.o(i.Verify_Time))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToTheseJson
</UL>

<P><STRONG><a name="[ea]"></a>Verify_UUID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bluetooth.o(i.Verify_UUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Verify_UUID &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToTheseJson
</UL>

<P><STRONG><a name="[10b]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14a]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[ee]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
</UL>

<P><STRONG><a name="[14b]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[95]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherhash1
</UL>

<P><STRONG><a name="[10d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueID
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CurrentRotate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
</UL>

<P><STRONG><a name="[14d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9a]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateEthereumAddress
</UL>

<P><STRONG><a name="[14e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[14f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[150]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[113]"></a>beep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, beep.o(i.beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beep &rArr; beep_on
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_unlock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_lock
</UL>

<P><STRONG><a name="[116]"></a>beep_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, beep.o(i.beep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beep_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>beep_lock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, beep.o(i.beep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beep_lock &rArr; beep &rArr; beep_on
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>beep_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.beep_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_off
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>

<P><STRONG><a name="[114]"></a>beep_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.beep_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>

<P><STRONG><a name="[118]"></a>beep_unlock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, beep.o(i.beep_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beep_unlock &rArr; beep &rArr; beep_on
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>checkBatteryCommand</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, battery.o(i.checkBatteryCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = checkBatteryCommand &rArr; Battery_openNotify &rArr; Send_AT_Command &rArr; BlueAT_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_openNotify
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_openFail
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_offNotify
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_lockFail
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 730 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; BatteryVoltage_get &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_unlock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_lock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unLockBikeCommand3
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unLockBikeCommand2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unLockBikeCommand1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_on
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_off
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBatteryCommand
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatteryLockState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStateWhenopen
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryLock_on
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryLock_off
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryLock_Reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_verify
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalOperationFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoToTheseJson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_check
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_CurrentRotate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_move
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltage_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetValue
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[109]"></a>parseData</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bluetooth.o(i.parseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = parseData &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>unLockBikeCommand1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, controller.o(i.unLockBikeCommand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unLockBikeCommand1 &rArr; Serial_SendArray &rArr; Serial_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendArray
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>unLockBikeCommand2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, controller.o(i.unLockBikeCommand2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unLockBikeCommand2 &rArr; Serial_SendArray &rArr; Serial_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendArray
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>unLockBikeCommand3</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, controller.o(i.unLockBikeCommand3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = unLockBikeCommand3 &rArr; Serial_SendArray &rArr; Serial_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendArray
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[104]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[105]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[57]"></a>uECC_vli_cmp_unsafe</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_point
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
</UL>

<P><STRONG><a name="[4c]"></a>HMAC_init</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_deterministic
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_V
</UL>

<P><STRONG><a name="[4d]"></a>HMAC_update</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_deterministic
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_V
</UL>

<P><STRONG><a name="[4e]"></a>HMAC_finish</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_deterministic
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_V
</UL>

<P><STRONG><a name="[4b]"></a>update_V</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_finish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_update
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMAC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_deterministic
</UL>

<P><STRONG><a name="[52]"></a>keccakf</STRONG> (Thumb, 2228 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_finish
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_update
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[51]"></a>xorin</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ukeccak256_update
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
</UL>

<P><STRONG><a name="[4f]"></a>hash</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hash &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccakf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keccak_256
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_512
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_384
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_256
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha3_224
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shake256
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shake128
</UL>

<P><STRONG><a name="[54]"></a>omega_mult_secp256k1</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1
</UL>

<P><STRONG><a name="[41]"></a>vli_mmod_fast_secp256k1</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = vli_mmod_fast_secp256k1 &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[59]"></a>regularize_k</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_point_mult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[44]"></a>vli_mmod_fast_secp192r1</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[46]"></a>vli_mmod_fast_secp224r1</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[47]"></a>vli_mmod_fast_secp256r1</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[5e]"></a>vli_modInv_update</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
</UL>

<P><STRONG><a name="[60]"></a>omega_mult_secp160r1</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1
</UL>

<P><STRONG><a name="[48]"></a>vli_mmod_fast_secp160r1</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = vli_mmod_fast_secp160r1 &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[43]"></a>x_side_default</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = x_side_default &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[3f]"></a>mod_sqrt_default</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mod_sqrt_default &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[42]"></a>double_jacobian_default</STRONG> (Thumb, 338 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[6b]"></a>mod_sqrt_secp224r1_rs</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1
</UL>

<P><STRONG><a name="[40]"></a>x_side_secp256k1</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[3e]"></a>double_jacobian_secp256k1</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[6c]"></a>XYcZ_addC</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[6d]"></a>XYcZ_add</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[6e]"></a>apply_z</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[45]"></a>mod_sqrt_secp224r1</STRONG> (Thumb, 440 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mod_sqrt_secp224r1 &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uECC.o(.rodata)
</UL>
<P><STRONG><a name="[70]"></a>EccPoint_mult</STRONG> (Thumb, 410 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_point_mult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_compute_public_key
</UL>

<P><STRONG><a name="[72]"></a>EccPoint_compute_public_key</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_compute_public_key
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key
</UL>

<P><STRONG><a name="[74]"></a>bits2int</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, uECC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = bits2int &rArr; uECC_vli_bytesToNative &rArr; uECC_vli_clear &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k_internal
</UL>

<P><STRONG><a name="[75]"></a>uECC_sign_with_k_internal</STRONG> (Thumb, 406 bytes, Stack size unknown bytes, uECC.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_deterministic
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k
</UL>

<P><STRONG><a name="[10e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[111]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[110]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[3d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[3a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
